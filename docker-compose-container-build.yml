# Start container using docker-compose.yml in foreground mode
# docker-compose [-f docker-compose-filename] up

# Start container using docker-compose.yml in foreground mode, rebuild any existing images
# docker-compose [-f docker-compose-filename] up --build

# Start container using docker-compose.yml in detached mode
# docker-compose [-f docker-compose-filename] up -d

# Stop all containers started via docker-compose and delete them
# docker-compose [-f docker-compose-filename] down

# Output log content of all running containers
# docker-compose [-f docker-compose-filename] logs [service]

# Restart specified service/container
# docker-compose [-f docker-compose-filename] restart <service name>

# FOR DEPLOYING WAR ARCHIVES ALREADY BUILT ON GRADLE/MAVEN DOCKER CONTAINER
version: '3.7'
# Define anchor definition for healthcheck functionality
x-healthcheck:
  &health_check
  interval: 1m
  timeout: 10s
  retries: 2
  start_period: 2m
# Services definition
services:
  # Germes mysql database server
  mysql:
    build:
      context: germes-admin
      dockerfile: src/main/resources/docker/mysql.dockerfile
      #logging:
      # driver: none
    networks:
      - network1
    ports:
      - "3307:3306"
    environment:
      - MYSQL_USER=germes
      - MYSQL_PASSWORD=germes
      - MYSQL_DATABASE=germes
    env_file:
      - mysql.env
    command: ['--collation-server=utf8mb4_unicode_ci', '--character-set-server=utf8mb4']
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      <<: *health_check
      test: mysql -ugermes -pgermes -e "SELECT version();"
  # Germes admin application
  admin:
    build:
      context: .
      dockerfile: germes-client/src/main/resources/docker/service/jetty-base.dockerfile
      args:
        - war_path=/opt/admin.war
    ports:
      - "9000:8080"
    networks:
      - network1
    depends_on:
      - mysql
    entrypoint: bash -c "sleep 5s && java -jar /usr/local/jetty/start.jar"
    healthcheck:
      <<: *health_check
      test: curl -f http://localhost:8080 || exit 1
  # Germes client application
  client:
    build:
      context: .
      dockerfile: germes-client/src/main/resources/docker/service/client.dockerfile
    ports:
      - "8080:80"
    networks:
      - network1
    depends_on:
      - geography
    healthcheck:
      <<: *health_check
      test: curl -f http://localhost:80 || exit 1
  # Geography service
  geography:
    build:
      context: .
      dockerfile: germes-client/src/main/resources/docker/service/jetty-base.dockerfile
      args:
        - war_path=/opt/geography-service.war
    ports:
      - "8090:8080"
    networks:
      - network1
    depends_on:
      - mysql
    entrypoint: bash -c "sleep 5s && java -jar /usr/local/jetty/start.jar"
    healthcheck:
      <<: *health_check
      test: curl -f http://localhost:8080 || exit
  user:
    build:
      context: .
      dockerfile: germes-client/src/main/resources/docker/service/jvm.dockerfile
      args:
        - jar_path=/opt/user-service.jar
    ports:
      - "8070:8080"
    networks:
      - network1
    depends_on:
      - mysql
    entrypoint: bash -c "sleep 5s && java -jar /opt/user-service.jar"
    healthcheck:
      <<: *health_check
      test: curl -f http://localhost:8080 || exit 1
  ticket:
    build:
      context: .
      dockerfile: germes-client/src/main/resources/docker/service/jvm.dockerfile
      args:
        - jar_path=/opt/ticket-service.jar
    ports:
      - "8060:8080"
    networks:
      - network1
    depends_on:
      - mysql
    entrypoint: bash -c "sleep 5s && java -jar /opt/ticket-service.jar"
    healthcheck:
      <<: *health_check
      test: curl -f http://localhost:8080 || exit 1
# Networks definition
networks:
  network1:
    driver: bridge
# Volumes definition
volumes:
  germes-mysql-data: